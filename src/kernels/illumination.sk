#include <render/illumination.h>

using namespace luisa;
using namespace luisa::math;
using namespace luisa::illumination;

LUISA_KERNEL void uniform_select_lights(
    LUISA_DEVICE_SPACE const float *sample_buffer,
    LUISA_DEVICE_SPACE const Info *info_buffer,
    LUISA_DEVICE_SPACE Atomic<uint> *queue_sizes,
    LUISA_DEVICE_SPACE light::Selection *queues,
    LUISA_DEVICE_SPACE const uint &its_count,
    LUISA_UNIFORM_SPACE SelectLightsKernelUniforms &uniforms,
    LUISA_THREAD_ID_DECL) {
    
    if (auto tid = LUISA_THREAD_ID; tid < its_count) {
        auto light_info = info_buffer[min(static_cast<uint>(sample_buffer[tid] * uniforms.light_count), uniforms.light_count - 1u)];
        auto queue_index = luisa_atomic_fetch_add(queue_sizes[light_info.tag()], 1u);
        queues[light_info.tag() * uniforms.max_queue_size + queue_index] = {light_info.index(), tid};
    }
}

LUISA_KERNEL void collect_light_interactions(
    LUISA_DEVICE_SPACE const uint *its_instance_id_buffer,
    LUISA_DEVICE_SPACE const uint8_t *its_state_buffer,
    LUISA_DEVICE_SPACE const Info *instance_to_info_buffer,
    LUISA_DEVICE_SPACE Atomic<uint> *queue_sizes,
    LUISA_DEVICE_SPACE light::Selection *queues,
    LUISA_DEVICE_SPACE const uint &its_count,
    LUISA_UNIFORM_SPACE CollectLightInteractionsKernelUniforms &uniforms,
    LUISA_THREAD_ID_DECL) {
    
    if (auto tid = LUISA_THREAD_ID; tid < its_count) {
        auto state = its_state_buffer[tid];
        if (state & interaction::state::EMISSIVE) {  // hit on lights
            auto light_info = instance_to_info_buffer[its_instance_id_buffer[tid]];
            auto queue_index = luisa_atomic_fetch_add(queue_sizes[light_info.tag()], 1u);
            queues[light_info.tag() * uniforms.max_queue_size + queue_index] = {light_info.index(), tid};
        } else if (!(state & interaction::state::HIT) && uniforms.has_sky) {  // background
            auto queue_index = luisa_atomic_fetch_add(queue_sizes[uniforms.sky_tag], 1u);
            queues[uniforms.sky_tag * uniforms.max_queue_size + queue_index] = {0u, tid};
        }
    }
}
